<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');class Variance extends CI_Controller {    /**     * ark Admin Panel for Codeigniter      * Author: Abhishek R. Kaushik     * downloaded from http://devzone.co.in     *     */    public function __construct() {        parent::__construct();        $this->load->library('form_validation');        $this->load->model('result_model');        if (!$this->session->userdata('is_admin_login')) {            redirect('admin/home');        }    }    public function index() {        $arr['title'] = 'Variance';        $search_type = isset($_POST['search_type']) ? $_POST['search_type'] : '';        $search = isset($_POST['search']) ? $_POST['search'] : '';        $arr['search_type'] = isset($_POST['search_type']) ? $_POST['search_type'] : '';        $arr['search'] = isset($_POST['search']) ? $_POST['search'] : '';        $this->db->join("center", "center.centid = inspection.inscid");        if ($search_type) {            $this->db->like($search_type, $search);        }        $this->db->where("inspection.type", "Inventory");        $this->db->where("inspection.ins_delete", "Y");        //$this->db->where("inspection.status","0");        $this->db->order_by("inspection.insid", "Desc");        $query = $this->db->get("inspection");        $result = $query->result_array();        $arr['list'] = $result;        $this->load->view('admin/vwViewVariance', $arr);    }    public function download($insid) {        $this->db->where("results_inventory.aid", $insid);        $query = $this->db->get("results_inventory");        $result = $query->row_array();        //echo '<pre/>';print_r($result);exit;        //--------getting assessor and client detais---------        $this->db->select("first_name,last_name");        $this->db->where("users.id", $result['uid']);        $query = $this->db->get("users");        $auditor = $query->row_array();        //echo '<pre/>';print_r($auditor);exit;        $this->db->select("center_name");        $this->db->where("center.centid", $result['cenid']);        $query = $this->db->get("center");        $center = $query->row_array();        //echo '<pre/>';print_r($center);exit;        //---------code for download excel sheet------------        $this->load->helper('download');        $this->load->library('PHPExcel');        $this->load->library('PHPExcel/IOFactory');        $objPHPExcel = new PHPExcel();        $objPHPExcel->getProperties()->setTitle("title")                ->setDescription("description");        $objPHPExcel->getSheet(0)->setTitle('Variance List');        $objPHPExcel->createSheet(1);        $styleArray = array(            'borders' => array(                'bottom' => array(                    'style' => PHPExcel_Style_Border::BORDER_MEDIUM,                    'color' => array('argb' => '95B3D7'),                ),            ),        );        $objPHPExcel->getActiveSheet()->getStyle('A1:E1')->applyFromArray($styleArray);        $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(40);        $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(20);        $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(20);        $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);        $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20);        $objPHPExcel->getActiveSheet()->getStyle('A1:E1')->getFont()->applyFromArray(                array(                    'name' => 'Calibri',                    'bold' => true,                    'size' => 12,                    'italic' => false,                    'color' => array(                        'rgb' => '1F4981'                    )                )        );        $objPHPExcel->getActiveSheet()->getRowDimension(1)->setRowHeight(20);        $objPHPExcel->getActiveSheet()->getRowDimension(2)->setRowHeight(20);        $objPHPExcel->getActiveSheet()->getRowDimension(3)->setRowHeight(20);        $objPHPExcel->getActiveSheet()->getRowDimension(4)->setRowHeight(20);        $objPHPExcel->getActiveSheet()->getRowDimension(5)->setRowHeight(20);        $row = 1;        $objPHPExcel->getActiveSheet()                ->setCellValue('A' . $row, 'Description')                ->setCellValue('B' . $row, 'Code')                ->setCellValue('C' . $row, 'Actual Quantity')                ->setCellValue('D' . $row, 'Sold Out')                ->setCellValue('E' . $row, 'Variance');        $row++;        $i = 1;        $qids = explode(',', $result['qids']);        $scores = explode(',', $result['scores']);        $scores2 = explode(',', $result['scores2']);        foreach ($qids as $key => $value) {            $this->db->where("inventory.qid", $value);            $res = $this->db->get("inventory");            $rowss = $res->row_array();            //echo '<pre/>';print_r($rowss);exit;            $percent = 0;            $fields = 25;            if ($rowss['question'])                $percent += 1;            if ($rowss['code'])                $percent += 1;            if ($rowss['r_quantity'])                $percent += 1;            if ($rowss['insid'])                $percent += 1;            if ($rowss['qid'])                $percent += 1;            $act_qty = $rowss['r_quantity'] != '' ? $rowss['r_quantity'] : $scores[$key];            $total = round(($percent / $fields) * 100);            $i++;            $objPHPExcel->getActiveSheet()->getRowDimension($i)->setRowHeight(20);            $objPHPExcel->getActiveSheet()                    ->setCellValue('A' . $row, $rowss['question'])                    ->setCellValue('B' . $row, 'B' . str_pad($rowss['code'], 6, "0", STR_PAD_LEFT))                    ->setCellValue('C' . $row, $act_qty)                    ->setCellValue('D' . $row, ($scores2[$key] != ' ' ? $scores2[$key] : '0'))                    ->setCellValue('E' . $row, ($act_qty - $scores2[$key]));            $row++;            $styleArray0 = array(                'borders' => array(                    'right' => array(                        'style' => PHPExcel_Style_Border::BORDER_THIN,                        'color' => array('argb' => '000000'),                    ),                ),                'fill' => array(                    'type' => PHPExcel_Style_Fill::FILL_SOLID,                    'color' => array('rgb' => 'ffffff')                )            );            $styleArray = array(                'borders' => array(                    'right' => array(                        'style' => PHPExcel_Style_Border::BORDER_THIN,                        'color' => array('argb' => '000000'),                    ),                ),                'fill' => array(                    'type' => PHPExcel_Style_Fill::FILL_SOLID,                    'color' => array('rgb' => 'E4E4DC')                )            );            $styleArray1 = array(                'borders' => array(                    'bottom' => array(                        'style' => PHPExcel_Style_Border::BORDER_THIN,                        'color' => array('argb' => '000000'),                    ),                ),            );            if ($i % 2 == 0) {                $objPHPExcel->getActiveSheet()->getStyle('A' . $i)->applyFromArray($styleArray0);                $objPHPExcel->getActiveSheet()->getStyle('B' . $i)->applyFromArray($styleArray0);                $objPHPExcel->getActiveSheet()->getStyle('C' . $i)->applyFromArray($styleArray0);                $objPHPExcel->getActiveSheet()->getStyle('D' . $i)->applyFromArray($styleArray0);                $objPHPExcel->getActiveSheet()->getStyle('E' . $i)->applyFromArray($styleArray0);            } else {                $objPHPExcel->getActiveSheet()->getStyle('A' . $i)->applyFromArray($styleArray);                $objPHPExcel->getActiveSheet()->getStyle('B' . $i)->applyFromArray($styleArray);                $objPHPExcel->getActiveSheet()->getStyle('C' . $i)->applyFromArray($styleArray);                $objPHPExcel->getActiveSheet()->getStyle('D' . $i)->applyFromArray($styleArray);                $objPHPExcel->getActiveSheet()->getStyle('E' . $i)->applyFromArray($styleArray);            }        }        $date = date('F_d_Y_h_i_a');        $filename = 'Variance List created by ' . $auditor['first_name'] . " " . $auditor['last_name'] . ' for ' . $center['center_name'] . '_' . $date . '.xlsx'; //save our workbook as this file name        header('Content-Type: application/vnd.ms-excel'); //mime type        header('Content-Disposition: attachment;filename="' . $filename . '"'); //tell browser what's the file name        header('Cache-Control: max-age=0'); //no cache        $objWriter = IOFactory::createWriter($objPHPExcel, 'Excel2007');        //$objWriter->save("php://output");        $objWriter->save(str_replace(__FILE__, 'xls/' . $filename, __FILE__));        $this->load->library('email');        $this->email->from('info@glocalthinkers.com', 'Glocal Thinkers');        $this->email->to('admin@glocalthinkers.com');        $this->email->bcc('sachinsheoran28@gmail.com,sachin.kumar@glocalthinkers.com,pankaj.rana@glocalthinkers.com');        $this->email->subject('Variance List');        $this->email->message('Please see below attached excel sheet.');        $this->email->attach(str_replace(__FILE__, 'xls/' . $filename, __FILE__));        if ($this->email->send()) {            //echo 'success';exit;            $cond = "inspection.insid=$insid";            $dataa = array(                'status' => '1',            );            $this->db->update("inspection", $dataa, $cond);            $this->session->set_userdata("msg", "variance send successfully.");        } else {            $this->session->set_userdata("msg", "variance not send successfully.");        }        //----------end of excel sheet code--------------        redirect('admin/variance');    }    public function getpdf($insid){        $this->db->select("inspection.*,variance.*,variance.type as vtpe");        $this->db->join("inspection","inspection.insid = variance.ins_id");        $this->db->where("inspection.insid",$insid);                $this->db->where("variance.type","FVG");        $query = $this->db->get("variance");        $result_FVG =  $query->result_array();        //echo '<pre/>';print_r($result_FVG);exit;        $data['fvg'] = $result_FVG;                $this->db->where("variance.type","FVL");        $query = $this->db->get("variance");        $result_FVL =  $query->result_array();        //echo '<pre/>';print_r($result_FVL);exit;        $data['fvl'] = $result_FVL;                $this->db->where("variance.type","FYG");        $query = $this->db->get("variance");        $result_FYG =  $query->result_array();        //echo '<pre/>';print_r($result_FYG);exit;        $data['fyg'] = $result_FYG;                $this->db->where("variance.type","FYL");        $query = $this->db->get("variance");        $result_FYL =  $query->result_array();        //echo '<pre/>';print_r($result_FYL);exit;        $data['fyl'] = $result_FYL;                $this->db->where("variance.type","PVL");        $query = $this->db->get("variance");        $result_PVL =  $query->result_array();        //echo '<pre/>';print_r($result_FVG);exit;        $data['pvl'] = $result_PVL;                $this->db->where("variance.type","PVG");        $query = $this->db->get("variance");        $result_PVG =  $query->result_array();        //echo '<pre/>';print_r($result_PVG);exit;        $data['pvg'] = $result_PVG;                $this->db->where("variance.type","FOC");        $query = $this->db->get("variance");        $result_FOC =  $query->result_array();        //echo '<pre/>';print_r($result_FOC);exit;        $data['foc'] = $result_FOC;                $this->db->where("variance.type","FPC");        $query = $this->db->get("variance");        $result_FPC =  $query->result_array();        //echo '<pre/>';print_r($result_FPC);exit;        $data['fpc'] = $result_FPC;                $this->load->library('pdf');        //$this->pdf->load_view('getVarianceReport', $data);        $this->pdf->load_view('vwVarianceShow', $data);        //$this->pdf->load_view('getVarianceReport - Copy', $data);        $this->pdf->render();        $filename = date('Y-M-d_H:i:s', time()) . "-report.pdf";        $this->pdf->stream($filename);    }             public function save_download()    {                 //load mPDF library        $this->load->library('m_pdf');        //load mPDF library        //now pass the data//         $this->data['title']="MY PDF TITLE 1.";         $this->data['description']="";         //$this->data['description']=$this->official_copies;         //now pass the data //        $html=$this->load->view('gettestvariance',$this->data, true); //load the pdf_output.php by passing our data and get all data in $html varriable.                        //this the the PDF filename that user will get to download        $pdfFilePath ="mypdfName-".time()."-download.pdf";        //actually, you can pass mPDF parameter on this load() function        $pdf = $this->m_pdf->load();        //generate the PDF!                //echo $html;        $pdf->WriteHTML($html,2);        //offer it to user via browser download! (The PDF won't be saved on your server HDD)        $pdf->Output($pdfFilePath, "D");    }            function pdf($insid)    {        $this->load->helper('pdf_helper');                $this->db->select("inspection.*,variance.*,variance.type as vtpe");        $this->db->join("inspection","inspection.insid = variance.ins_id");        $this->db->where("inspection.insid",$insid);                $this->db->where("variance.type","FVG");        $query = $this->db->get("variance");        $result_FVG =  $query->result_array();        //echo '<pre/>';print_r($result_FVG);exit;        $data['fvg'] = $result_FVG;                $this->db->where("variance.type","FVL");        $query = $this->db->get("variance");        $result_FVL =  $query->result_array();        //echo '<pre/>';print_r($result_FVL);exit;        $data['fvl'] = $result_FVL;                $this->db->where("variance.type","FYG");        $query = $this->db->get("variance");        $result_FYG =  $query->result_array();        //echo '<pre/>';print_r($result_FYG);exit;        $data['fyg'] = $result_FYG;                $this->db->where("variance.type","FYL");        $query = $this->db->get("variance");        $result_FYL =  $query->result_array();        //echo '<pre/>';print_r($result_FYL);exit;        $data['fyl'] = $result_FYL;                $this->db->where("variance.type","PVL");        $query = $this->db->get("variance");        $result_PVL =  $query->result_array();        //echo '<pre/>';print_r($result_FVG);exit;        $data['pvl'] = $result_PVL;                $this->db->where("variance.type","PVG");        $query = $this->db->get("variance");        $result_PVG =  $query->result_array();        //echo '<pre/>';print_r($result_PVG);exit;        $data['pvg'] = $result_PVG;                $this->db->where("variance.type","FOC");        $query = $this->db->get("variance");        $result_FOC =  $query->result_array();        //echo '<pre/>';print_r($result_FOC);exit;        $data['foc'] = $result_FOC;                $this->db->where("variance.type","FPC");        $query = $this->db->get("variance");        $result_FPC =  $query->result_array();        //echo '<pre/>';print_r($result_FPC);exit;        $data['fpc'] = $result_FPC;                $this->load->view('gettestvariance', $data);    }      }